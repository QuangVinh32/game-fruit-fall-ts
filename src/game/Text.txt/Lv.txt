import FruitTypeController from "../Controllers/FruitTypeController";
import FruitDTO from "../DTOs/FruitDTO";
import FruitService from "../Services/FruitService";
import PlayerService from "../Services/PlayerService";
import FruitView from "../Views/FruitView";
import PlayerView from "../Views/PlayerView";
import UIScene from "./UIScene";

export default class LevelScene extends Phaser.Scene {
    private playerService: PlayerService | null;
    private fruitService: FruitService | null;
    private levelId: number;
    private canMovePlayer: boolean;
    private canDropFruit: boolean;
    private playerView: any;
    private score: number;
    private catchSound: Phaser.Sound.BaseSound | null = null;
    private fruitsCaught: { levelId: number, fruitId: number }[]; 
    private fruitsCaughtMatrix: Map<number, { levelId: number, fruitId: number }[]> = new Map();
    private validFruitsCount: number;
    private fruitView: any;
    private playerViews: PlayerView[] = [];
    // private fruitTypeController: FruitTypeController;
    private fruitViews: FruitView[] = [];
    fruits: FruitDTO[];



    constructor() {
        super("LevelScene");
        this.canMovePlayer = false;
        this.canDropFruit = false; 
        this.score = 0;
        this.fruitsCaught = [];
        
    }

    preload() {
        this.load.image("player", "assets/Images/player.png");
        this.load.image("shadow", "assets/Images/shadow.png")
        this.load.image("apple", "assets/Images/apple.png");
        this.load.image("cherry", "assets/Images/cherry.png");
        this.load.image("kiwi", "assets/Images/kiwi.png");
        this.load.image("lemon", "assets/Images/lemon.png");
        this.load.image("lime", "assets/Images/lime.png");
        this.load.image("mango", "assets/Images/mango.png");
        this.load.image("orrange", "assets/Images/orrange.png");
        this.load.image("peache", "assets/Images/peache.png");
        this.load.image("pear", "assets/Images/pear.png");

        this.load.audio("sound_catch", "assets/Audio/sound_catch.mp3");
    }

    init(data: { levelId: number, validFruitsCount: number, fruitsCaught: { levelId: number, fruitId: number }[], canMovePlayer?: boolean, canDropFruit?: boolean }) {
        this.levelId = data.levelId || 1;
        this.validFruitsCount = data.validFruitsCount || 0;
        this.fruitsCaught = data.fruitsCaught || [];
        
        this.canMovePlayer = data.canMovePlayer ?? false;
        this.canDropFruit = data.canDropFruit ?? false;
    
        if (this.score > 0 && this.validFruitsCount > 0) {
            this.score -= this.validFruitsCount;
            if (this.score < 0) {
                this.score = 0; 
            }        
        }
        // console.log("Score after deduction:", this.score);
        // console.log("canMovePlayer:", this.canMovePlayer);
        // console.log("canDropFruit:", this.canDropFruit);
    }
    
    
    async create() {

        this.catchSound = this.sound.add("sound_catch", {
            volume: 3,
        });
    
        this.fruitService = new FruitService(this, "assets/Data/fruit.json");
        await this.fruitService.initialize(this.levelId);


        this.fruits = this.fruitService.getAllFruitsByLevelId(this.levelId);
        console.log(this.fruits)
        console.log(this.levelId)

        this.fruits.forEach((fruitData) => this.createFruitView(fruitData));

    
        this.playerService = new PlayerService("assets/Data/player.json");
        await this.playerService.initialize(this.levelId); 

        
        
        // Lấy tất cả các PlayerDTOs liên quan đến level hiện tại
        const playerDTOs = this.playerService.getAllPlayerDTOs().filter(player => player.levelId === this.levelId);
        
        if (playerDTOs.length === 0) {
            console.warn(`No players found for levelId: ${this.levelId}`);
        } else {
            playerDTOs.forEach(playerDTO => {
                // Tạo PlayerView cho từng PlayerDTO
                this.playerView = new PlayerView(this, playerDTO);
                console.log(this.playerView)
                // Thêm PlayerView vào scene
                this.add.existing(this.playerView);  
                // Cài đặt các thuộc tính vật lý
                this.physics.add.existing(this.playerView);
                const body = this.playerView.body as Phaser.Physics.Arcade.Body;
            
                if (!body) {
                    console.error("PlayerView body is not initialized correctly.");
                    return;
                }
            
                body.setCollideWorldBounds(true);
                body.setImmovable(true);
            
                // Đặt vị trí ban đầu
                this.playerView.setPosition(350, 490);
            
                // Thêm logic điều khiển (ví dụ di chuyển bằng chuột)
                this.input.on("pointermove", (pointer: any) => {
                    if (this.canMovePlayer) {
                        this.playerView.x = pointer.worldX;
                        this.playerView.y = 490;
                    }
                });
            });
            
        }
        
        this.events.on("startFruitFall", () => {
            this.canDropFruit = true;
            // console.log("dropFruit",this.canDropFruit)
        });
    
        this.events.on("enablePlayerMove", () => {
            this.canMovePlayer = true;
            // console.log("movePlayer",this.canMovePlayer)

        });

  

        this.startFruitFall();
    }

    createFruitView(fruitData: FruitDTO): void {
        if (this.fruitService) {
            const fruitType = this.fruitService.getFruitTypeById(fruitData.id);
            if (fruitType) {
                const fruitView = new FruitView(this, fruitData, fruitType);
                console.log("1",fruitView)
                this.fruitViews.push(fruitView);
            }
        } else {
            console.error('FruitService is not initialized');
        }
    }
    getFruitViewById(fruitId: number, levelId: number): FruitView | undefined {
        return this.fruitViews.find(
            view => view.fruitData.fruitId === fruitId && view.fruitData.levelId === levelId
        );
    }
    
    startFruitFall() {
        if (!this.fruitService) return;
    
        if (!this.fruits.length) {
            console.warn(`Không có trái cây nào cho levelId: ${this.levelId}`);
            return;
        }
    
        const spawnFruit = () => {
            if (!this.canDropFruit) return;
    
            if (this.fruits.length === 0) {
                console.warn("Tất cả trái cây đã được sử dụng.");
                this.canMovePlayer = false;
                this.canDropFruit = false;
                this.scene.start('ResultScene', { score: this.score, levelId: this.levelId,   
                fruitsCaughtMatrix: Object.fromEntries(this.fruitsCaughtMatrix),});
                this.scene.start('QuestionAndOptionScene', { score: this.score, levelId: this.levelId,   
                fruitsCaughtMatrix: Object.fromEntries(this.fruitsCaughtMatrix),});
                return;
            }
    
            const randomIndex = Phaser.Math.Between(0, this.fruits.length - 1);
            const randomFruit = this.fruits.splice(randomIndex, 1)[0];
            const fruitView = this.getFruitViewById(randomFruit.fruitId, this.levelId);
            console.log(fruitView)
    
            console.log("FruitId", randomFruit.fruitId);
            if (!fruitView) return;
            this.physics.add.existing(fruitView);
            const body = fruitView.body as Phaser.Physics.Arcade.Body | null;
            if (body) {
                body.setImmovable(true);
            
                const durations = [2200, 2100, 2000, 2100, 2200, 2300];
                const duration = durations[this.levelId - 1] || 0;
            
                if (duration > 0) {
                    this.tweens.add({
                        targets: fruitView,       
                        y: 650,                   
                        duration,                 
                        ease: 'Quad.easeOut',     
                        onComplete: () => {
                            fruitView.destroy();
                        },
                    });
                } else {
                    body.setGravityY(0);
                }
            
                body.setImmovable(true);
            }
            console.log("2",fruitView)
            console.log(this.playerView)
            
            if (fruitView && this.playerView) { 
                
    
            this.physics.add.collider(this.playerView, fruitView, (player, fruit) => {
                if (this.catchSound) {
                    this.catchSound.play();
                }
                this.score++;



                fruit.destroy();

                const uiScene = this.scene.get('UIScene') as UIScene;
                if (uiScene) {
                    uiScene.updateLaunchCount(this.score); 
                }
                

                const caughtFruit = {
                    levelId: this.levelId,
                    fruitId: randomFruit.fruitId
                };

                this.fruitsCaught.push(caughtFruit);

                if (!this.fruitsCaughtMatrix.has(this.levelId)) {
                    this.fruitsCaughtMatrix.set(this.levelId, []);
                }
                this.fruitsCaughtMatrix.get(this.levelId)?.push(caughtFruit);

                this.tweens.add({
                    targets: this.playerView.player, 
                    y: this.playerView.player.y + 5, 
                    duration: 100, 
                    yoyo: true, 
                    ease: 'Bounce',
                });

                console.log("fruitsCaughtMatrix:", Array.from(this.fruitsCaughtMatrix.entries()));
            });} else {
                console.error("playerView hoặc fruitView không hợp lệ.");
              }

    //         // let fruitSpawnDelay = 2000;
    //         // switch (this.levelId) {
    //         //     case 1:
    //         //         fruitSpawnDelay = 2500;
    //         //         break;
    //         //     case 2:
    //         //         fruitSpawnDelay = 2200;
    //         //         break;
    //         //     case 3:
    //         //         fruitSpawnDelay = 2000;
    //         //         break;
    //         //     case 4:
    //         //         fruitSpawnDelay = 1800;
    //         //         break;
    //         //     default:
    //         //         fruitSpawnDelay = 2000;
    //         //         break;
    //         // }

    //         // this.time.addEvent({
    //         //     delay: fruitSpawnDelay,
    //         //     callback: () => {
    //         //         if (fruitView.body) {
    //         //             const body = fruitView.body as Phaser.Physics.Arcade.Body;
            
    //         //             if (body && body.touching.none) {
    //         //                 const missedFruit = {
    //         //                     levelId: this.levelId,
    //         //                     fruitId: 0 
    //         //                 };
            
    //         //                 this.fruitsCaught.push(missedFruit);
            
    //         //                 if (!this.fruitsCaughtMatrix.has(this.levelId)) {
    //         //                     this.fruitsCaughtMatrix.set(this.levelId, []);
    //         //                 }
    //         //                 this.fruitsCaughtMatrix.get(this.levelId)?.push(missedFruit);
            
    //         //                 console.log("Trái cây bị bỏ lỡ:", missedFruit);
    //         //                 console.log("fruitsCaughtMatrix hiện tại:", Array.from(this.fruitsCaughtMatrix.entries()));
    //         //             }
    //         //         }
    //         //     },
    //         //     loop: false,
    //         // });
            
        }
    
        this.time.addEvent({
            delay: 1500,
            callback: spawnFruit,
            loop: true,
        });
    }
}        