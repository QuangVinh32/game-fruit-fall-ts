import FruitService from "../Service/FruitService";
import PlayerService from "../Service/PlayerService";
import UIScene from "./UIScene";

export default class LevelScene extends Phaser.Scene {
    private playerService: PlayerService | null;
    private fruitService: FruitService | null;
    private levelId: number;
    private fruitId: number;
    private canMovePlayer: boolean;
    private canDropFruit: boolean;
    private playerView: any;
    private fruitView: any;
    private score: number;
    private catchSound: Phaser.Sound.BaseSound | null = null;
    private fruitsCaught: { levelId: number, fruitId: number }[];  
    



    constructor() {
        super("LevelScene");
        this.levelId = 2;
        this.canMovePlayer = false;
        this.canDropFruit = false; 
        this.score = 0;
        this.fruitsCaught = [];  

    }
    preload() {
        this.load.image("player", "assets/Images/player.png");
        this.load.image("apple", "assets/Images/apple.png");
        this.load.image("cherry", "assets/Images/cherry.png");
        this.load.image("kiwi", "assets/Images/kiwi.png");
        this.load.image("lemon", "assets/Images/lemon.png");
        this.load.image("lime", "assets/Images/lime.png");
        this.load.image("mango", "assets/Images/mango.png");
        this.load.image("orrange", "assets/Images/orrange.png");
        this.load.image("peache", "assets/Images/peache.png");
        this.load.image("pear", "assets/Images/pear.png");
        this.load.audio("sound_catch", "assets/Audio/sound_catch.mp3");

    }
    init(data: { levelId: number, fruitsCaught: { levelId: number, fruitId: number }[] }) {
        if (data) {
            this.levelId = data.levelId || 1; 
            this.fruitsCaught = data.fruitsCaught || []; 
        }
        console.log("LevelScene initialized with levelId:", this.levelId);
        console.log("Fruits caught from previous level:", this.fruitsCaught);
    }
    
 

    async create() {
        this.catchSound = this.sound.add("sound_catch", {
            volume: 1,
        });
        
        this.fruitService = new FruitService(this, "assets/Data/fruit.json");
        await this.fruitService.initialize(this.levelId);
    
        this.playerService = new PlayerService(this, "assets/Data/player.json");
        await this.playerService.initialize(this.levelId);
    
        const playerDTO = this.playerService.getPlayerDTOById(this.levelId);
        if (playerDTO) {
            this.playerView = this.playerService.getPlayerViewById(this.levelId);
            // console.log(this.playerView);
            // console.log(playerDTO);

            if (this.playerView) {
                // console.log(this.playerView)
                this.playerView.setPosition(350, 520);
                this.physics.add.existing(this.playerView);
                this.playerView.body.setCollideWorldBounds(true);
                this.playerView.body.setImmovable(true)

                this.input.on("pointermove", (pointer: any) => {
                    if (this.canMovePlayer) {
                        this.playerView.x = pointer.worldX;
                        this.playerView.y = 530;
                    }
                });
            }
        }
        this.events.on("startFruitFall", () => {
            this.canDropFruit = true;
        });

        this.events.on("enablePlayerMove", () => {
            this.canMovePlayer = true;
        });

        this.startFruitFall();
    }
    startFruitFall() {
        if (!this.fruitService) return;
    
        const fruits = groupedFruits[this.levelId] || []; // Get fruits based on current levelId
    
        if (!fruits.length) {
            console.warn(`Không có trái cây nào cho levelId: ${this.levelId}`);
            return;
        }
    
        const spawnFruit = () => {
            if (!this.canDropFruit) return;
    
            if (fruits.length === 0) {
                console.warn("Tất cả trái cây đã được sử dụng.");
                console.log("v", this.levelId);
                this.scene.start('ResultScene', { score: this.score, levelId: this.levelId, fruitsCaught: this.fruitsCaught });
                return;
            }
    
            const randomIndex = Phaser.Math.Between(0, fruits.length - 1);
            const randomFruit = fruits.splice(randomIndex, 1)[0];
            const fruitView = this.fruitService?.getFruitViewById(randomFruit, this.levelId);
    
            console.log("id", randomFruit);
            if (fruitView) {
                this.physics.add.existing(fruitView);
                const body = fruitView.body as Phaser.Physics.Arcade.Body | null;
    
                if (body) {
                    switch (this.levelId) {
                        case 1:
                            body.setGravityY(600);
                            break;
                        case 2:
                            body.setGravityY(8800);
                            break;
                        default:
                            body.setGravityY(0);
                            break;
                    }
                    body.setImmovable(true);
                }
    
                // Handle collisions and fruit catching
                this.physics.add.collider(this.playerView, fruitView, (player, fruit) => {
                    if (this.catchSound) {
                        this.catchSound.play();
                    }
                    this.score++;
                    console.log(this.score);
    
                    fruit.destroy();
    
                    const uiScene = this.scene.get('UIScene') as UIScene;
                    if (uiScene) {
                        uiScene.updateLaunchCount(this.score);
                    }
    
                    this.fruitsCaught.push({
                        levelId: this.levelId,
                        fruitId: randomFruit
                    });
                });
            }
        };
    
        this.time.addEvent({
            delay: 3000,
            callback: spawnFruit,
            loop: true,
        });
    }

}















import FruitService from "../Service/FruitService";
import PlayerService from "../Service/PlayerService";
import UIScene from "./UIScene";

export default class LevelScene extends Phaser.Scene {
    private playerService: PlayerService | null;
    private fruitService: FruitService | null;
    private levelId: number;
    private canMovePlayer: boolean;
    private canDropFruit: boolean;
    private playerView: any;
    private score: number;
    private catchSound: Phaser.Sound.BaseSound | null = null;
    private allFruitsCaught: { levelId: number, fruitId: number }[]; // Mảng lưu tất cả trái cây từ các cấp
    private fruitsCaught: { levelId: number, fruitId: number }[];   // Mảng lưu trái cây của cấp hiện tại

    constructor() {
        super("LevelScene");
        this.levelId = 1;
        this.canMovePlayer = false;
        this.canDropFruit = false;
        this.score = 0;
        this.allFruitsCaught = [];
        this.fruitsCaught = [];
    }

    preload() {
        this.load.image("player", "assets/Images/player.png");
        this.load.image("apple", "assets/Images/apple.png");
        this.load.image("pear", "assets/Images/pear.png");
        this.load.image("orrange", "assets/Images/orrange.png");

        this.load.image("cherry", "assets/Images/cherry.png");
        this.load.audio("sound_catch", "assets/Audio/sound_catch.mp3");
    }

    init(data: { levelId: number, fruitsCaught: { levelId: number, fruitId: number }[] }) {
        if (data) {
            this.levelId = data.levelId || 1; 
            this.allFruitsCaught = data.fruitsCaught || []; 
        }
        console.log("LevelScene initialized with levelId:", this.levelId);
        console.log("Fruits caught from previous levels:", this.allFruitsCaught);
    }

    async create() {
        this.catchSound = this.sound.add("sound_catch", { volume: 1 });
        
        this.fruitService = new FruitService(this, "assets/Data/fruit.json");
        await this.fruitService.initialize(this.levelId);
    
        this.playerService = new PlayerService(this, "assets/Data/player.json");
        await this.playerService.initialize(this.levelId);
    
        const playerDTO = this.playerService.getPlayerDTOById(this.levelId);
        if (playerDTO) {
            this.playerView = this.playerService.getPlayerViewById(this.levelId);
            if (this.playerView) {
                this.playerView.setPosition(350, 530);
                this.physics.add.existing(this.playerView);
                this.playerView.body.setCollideWorldBounds(true);
                this.playerView.body.setImmovable(true);

                this.input.on("pointermove", (pointer: any) => {
                    if (this.canMovePlayer) {
                        this.playerView.x = pointer.worldX;
                        this.playerView.y = 530;
                    }
                });
            }
        }
        this.events.on("startFruitFall", () => {
            this.canDropFruit = true;
        });

        this.events.on("enablePlayerMove", () => {
            this.canMovePlayer = true;
        });

        this.startFruitFall();
    }

    startFruitFall() {
        if (!this.fruitService) return;

        const fruits = this.fruitService.getFruitsByLevelId(this.levelId);

        if (!fruits.length) {
            console.warn("Không có trái cây nào cho levelId:", this.levelId);
            return;
        }

        const spawnFruit = () => {
            if (!this.canDropFruit) return;

            if (fruits.length === 0) {
                console.warn("Tất cả trái cây đã được sử dụng.");

                // Lưu mảng fruitsCaught của level hiện tại vào allFruitsCaught
                this.allFruitsCaught = [...this.allFruitsCaught, ...this.fruitsCaught];
                console.log("all",this.allFruitsCaught);

                console.log("Dữ liệu tổng hợp:", this.allFruitsCaught);

                this.scene.start('ResultScene', {
                    score: this.score,
                    levelId: this.levelId,
                    fruitsCaught: this.allFruitsCaught,
                });
                return;
            }

            const randomIndex = Phaser.Math.Between(0, fruits.length - 1);
            const randomFruit = fruits.splice(randomIndex, 1)[0];
            const fruitView = this.fruitService?.getFruitViewById(randomFruit.fruitId, this.levelId);

            if (fruitView) {
                this.physics.add.existing(fruitView);
                const body = fruitView.body as Phaser.Physics.Arcade.Body | null;

                if (body) {
                    switch (this.levelId) {
                        case 1:
                            body.setGravityY(600);
                            break;
                        case 2:
                            body.setGravityY(700);
                            break;
                        case 3:
                            body.setGravityY(800);
                            break;
                        default:
                            body.setGravityY(0); 
                            break;
                    }
                    body.setImmovable(true);
                }

                this.physics.add.collider(this.playerView, fruitView, () => {
                    if (this.catchSound) {
                        this.catchSound.play();
                    }
                    this.score++;

                    fruitView.destroy();

                    const uiScene = this.scene.get('UIScene') as UIScene;
                    if (uiScene) {
                        uiScene.updateLaunchCount(this.score);
                    }

                    this.fruitsCaught.push({
                        levelId: this.levelId,
                        fruitId: randomFruit.fruitId
                    });
                });

                this.time.addEvent({
                    delay: 3000,
                    callback: () => {
                        if (fruitView.body) {
                            const body = fruitView.body as Phaser.Physics.Arcade.Body;
                            if (body && body.touching.none) {
                                this.fruitsCaught.push({
                                    levelId: this.levelId,
                                    fruitId: 0
                                });
                                console.log("Trái cây bị bỏ lỡ, fruitId được đặt thành 0");
                            }
                        }
                    },
                    loop: false,
                });
            }
        };

        this.time.addEvent({
            delay: 3000,
            callback: spawnFruit,
            loop: true,
        });
    }
}













/////////////
table
 // Add fruit sprites
        for (let row = 0; row < this.fruitsCaught.length; row++) {
            const fruitData = this.fruitsCaught[row];
            this.fruitId = fruitData.fruitId;

            // Lấy thông tin trái cây từ FruitService
            const fruitDTO = this.fruitService.getFruitDTOById(this.fruitId, this.levelId);
            if (fruitDTO) {
                // Tạo sprite trái cây và đặt nó vào vị trí phù hợp trong lưới
                const x = gridStartX + cellWidth / 2; // Thay đôi hàng ở đây
                const y = gridStartY + row * cellHeight + cellHeight / 2;
                // Tạo sprite cho trái cây
                const fruitType = this.fruitService.getFruitTypeById(fruitDTO.fruitTypeId);
                if (fruitType) {
                    this.add.sprite(x, y, fruitType.texture) 
                        .setOrigin(0.5, 0.5)
                        .setDisplaySize(fruitDTO.width, fruitDTO.height);  
                }
            }
            else {
            console.warn(`Missing data for fruitId: ${this.fruitId}`);
            }
        }




        //
                // Add fruit sprites
        for (let row = 0; row < this.fruitsCaught.length; row++) {
            const fruitData = this.fruitsCaught[row];
            this.fruitId = fruitData.fruitId;

            // Lấy thông tin trái cây từ FruitService
            const fruitDTO = this.fruitService.getFruitDTOById(this.fruitId, this.levelId);
            if (fruitDTO) {
                // Calculate x position based on level
                const x = gridStartX + (this.levelId - 1) * cellWidth + cellWidth / 2;
                const y = gridStartY + row * cellHeight + cellHeight / 2;

                // Tạo sprite cho trái cây
                const fruitType = this.fruitService.getFruitTypeById(fruitDTO.fruitTypeId);
                if (fruitType) {
                    this.add.sprite(x, y, fruitType.texture)
                        .setOrigin(0.5, 0.5)
                        .setDisplaySize(fruitDTO.width, fruitDTO.height);
                }
            } else {
                console.warn(`Missing data for fruitId: ${this.fruitId}`);
            }
        }



        
        // Add fruit sprites
        for (let row = 0; row < this.fruitsCaught.length; row++) {
            const fruitData = this.fruitsCaught[row];
            this.fruitId = fruitData.fruitId;

            // Lấy thông tin trái cây từ FruitService
            const fruitDTO = this.fruitService.getFruitDTOById(this.fruitId, this.levelId);
            if (fruitDTO) {
                // Calculate x position based on level
                const x = gridStartX + (this.levelId - 1) * cellWidth + cellWidth / 2;
                const y = gridStartY + row * cellHeight + cellHeight / 2;

                // Tạo sprite cho trái cây
                const fruitType = this.fruitService.getFruitTypeById(fruitDTO.fruitTypeId);
                if (fruitType) {
                    this.add.sprite(x, y, fruitType.texture)
                        .setOrigin(0.5, 0.5)
                        .setDisplaySize(fruitDTO.width, fruitDTO.height);
                }
            } else {
                console.warn(`Missing data for fruitId: ${this.fruitId}`);
            }
        }















        //////////


        import OptionDTO from "../DTOs/OptionDTO";
import FruitService from "../Service/FruitService";
import OptionService from "../Service/OptionService";
import QuestionService from "../Service/QuestionService";
import OptionView from "../View/OptionView";
import UIScene from "./UIScene";

export default class ResultScene extends Phaser.Scene {
    private fruitService: FruitService | null = null;
    private questionService: QuestionService | null = null;
    private optionService: OptionService | null = null;
    private levelId: number;
    private fruitsCaught: Map<number, { levelId: number, fruitId: number }[]> = new Map();
    private validFruitsCount: number;
    public fruitCountPerLevel: Map<number, number> = new Map();
    private buttonSound: any;
    bText: Phaser.GameObjects.Text;
    score: any;
    private scores: Map<number, number> = new Map(); 



    constructor() {
        super("ResultScene");
    }

    init(data: { score: number, levelId: number, fruitsCaught: { levelId: number, fruitId: number }[], validFruitsCount: number }) {
        this.levelId = data.levelId;
        this.validFruitsCount = data.validFruitsCount;
        this.score = data.score;
        console.log("score",data.score);
        

        data.fruitsCaught.forEach(fruit => {
            if (!this.fruitsCaught.has(fruit.levelId)) {
                this.fruitsCaught.set(fruit.levelId, []);
            }
            this.fruitsCaught.get(fruit.levelId)!.push(fruit);
        });

        console.log('Fruits caught (grouped by level):', this.fruitsCaught);
    }

    async create() {
        // Calculate the number of valid fruits (fruitId !== 0) for each level
        this.fruitCountPerLevel.clear(); // Reset the fruit count map
        this.fruitsCaught.forEach((fruits, levelId) => {
            const validCount = fruits.filter(fruit => fruit.fruitId !== 0).length;
            this.fruitCountPerLevel.set(levelId, validCount);
            console.log(`Level ${levelId}: Số lượng quả có fruitId khác 0 là ${validCount}`);
        });

        // Title and layout for fruits caught grid
        this.add.text(230, 15, "The Farmer's Fruit", { fontSize: '30px Arial', fontStyle: "bold", color: 'black' });

        // Grid creation (similar to the original code)
        const gridStartX = 50;
        const gridStartY = 80;
        const cellWidth = 60;
        const cellHeight = 60;
        const rows = 5;
        const cols = 10;

        const graphics = this.add.graphics();
        graphics.lineStyle(4, 0x000000, 1);
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const x = gridStartX + col * cellWidth;
                const y = gridStartY + row * cellHeight;
                graphics.strokeRect(x, y, cellWidth, cellHeight);
            }
        }
        // Thêm số ở phía trái (5, 4, 3, 2, 1)
        for (let row = 0; row < rows; row++) {
            const number = rows - row;
            this.add.text(
                gridStartX - 25, 
                gridStartY + row * cellHeight + cellHeight / 2 - 10, 
                number.toString(), 
                { fontSize: '20px', color: 'black', fontStyle: "bold" }
            );
        }

        // Add fruit names (like in original code)
        const fruitNames = ["Apples", "Pears", "Oranges", "Lemons", "Limes", "Peaches", "Cherries", "Mangoes", "Kiwis", "Star Fruit"];
        for (let col = 0; col < cols; col++) {
            this.add.text(gridStartX + col * cellWidth + cellWidth / 2 - 28, gridStartY + rows * cellHeight + 10, fruitNames[col % fruitNames.length], { fontSize: '12px', color: 'black', fontStyle: "bold" });
        }

        // Adding fruit images (as per your original logic)
        this.fruitService = new FruitService(this, "assets/Data/fruit.json");
        await this.fruitService.initializeNoView();

        this.fruitsCaught.forEach((fruits, levelId) => {
            fruits.forEach((fruitData, index) => {
                const fruitDTO = this.fruitService?.getFruitDTOById(fruitData.fruitId, levelId);
                if (fruitDTO) {
                    const x = 50 + (levelId - 1) * 60 + 30;
                    const y = 80 + index * 60 + 30;

                    const fruitType = this.fruitService?.getFruitTypeById(fruitDTO.fruitTypeId);
                    if (fruitType) {
                        this.add.sprite(x, y, fruitType.texture)
                            .setOrigin(0.5, 0.5)
                            .setDisplaySize(fruitDTO.width, fruitDTO.height);
                    }
                } else {
                    console.warn(`Missing data for fruitId: ${fruitData.fruitId} in level ${levelId}`);
                }
            });
        });

        // Display the 'Next Level' button
        this.add.text(90, 15, "Next Level", { fontSize: '25px Arial', fontStyle: "bold", color: 'red' })
            .setInteractive()
            .on('pointerdown', () => {
                this.levelId += 1;
                console.log("Transitioning to LevelScene with levelId:", this.levelId);
                this.scene.start('LevelScene', { levelId: this.levelId });
                this.scene.stop('QuestionAndOptionScene');
            });

        this.add.text(510, 15, "Wrong Answer", { fontSize: '25px Arial', fontStyle: "bold", color: 'red' })
            .setInteractive()
            .on('pointerdown', () => {
                const currentLevelFruits = this.fruitsCaught.get(this.levelId);
                if (currentLevelFruits) {
                    currentLevelFruits.length = 0; 
                }
                
                     // Xóa score cho levelId hiện tại
                if (this.scores.has(this.levelId)) {
                    this.scores.delete(this.levelId); // Xóa điểm số trong Map
                    console.log(`Score for level ${this.levelId} has been deleted.`);
                }
                console.log('Fruits caught for the current level cleared:', this.fruitsCaught);
                this.validFruitsCount = 0;
                console.log("Level trước đó", this.levelId);
                this.scene.start('LevelScene', {
                    levelId: this.levelId,
                    fruitsCaught: Array.from(this.fruitsCaught.get(this.levelId) || []), 
                    score: this.score,

                });
          
            });

        // Tạo chữ "A" với sự kiện click
        this.add.text(510, 150, "A", { fontSize: '25px Arial', fontStyle: "bold", color: 'red' })
        .setInteractive()
        .on('pointerdown', () => {
        // Khi click vào A, toggle hiển thị của "B"
            this.toggleB();
        });

        // Tạo chữ "B" và ẩn nó ngay lập tức
        this.bText = this.add.text(540, 150, "B", { fontSize: '25px Arial', fontStyle: "bold", color: 'red' })
            .setInteractive()
            .setVisible(false);  // Ẩn "B" ngay khi bắt đầu


            

        this.QuestionAndOpition();
    }

    toggleB() {
        // Chuyển trạng thái hiển thị của "B"
        this.bText.setVisible(!this.bText.visible);
    }

    


    async QuestionAndOpition() {
        this.add.text(180, 450, "Use the picture graph above to find the correct amount.", { fontSize: '15px Arial', color: 'black' });

        this.questionService = new QuestionService(this, "assets/Data/question.json");
        await this.questionService.initialize(this.levelId);

        const questionDTO = this.questionService.getQuestionDTOById(this.levelId);

        if (questionDTO && questionDTO.questionId !== undefined) {
            const questionId = questionDTO.questionId;

            this.optionService = new OptionService(this, "assets/Data/option.json");
            await this.optionService.initialize(questionId);

            const optionDTOs = this.optionService.getAllOptionDTOs1(questionId);

            const currentCount = this.fruitCountPerLevel.get(this.levelId) || 0;

            optionDTOs.forEach((optionDTO) => {
                const currentCount = this.fruitCountPerLevel.get(this.levelId) || 0;
                console.log("currentCount", currentCount);
                const optionView = new OptionView(this, optionDTO);
                this.add.existing(optionView);
                optionView.buttonOption.on('pointerdown', () => {
                    this.checkAnswer(currentCount, optionDTO);
                });
            });

        } else {
            console.error("Không thể lấy questionDTO hoặc questionId không hợp lệ");
        }
    }

    WrongChoice(currentCount: number){
        this.add.text(240, 410, "Sorry, The answer is", { fontSize: '20px Arial', fontStyle: "bold", color: 'black' })
        this.add.text(440, 410, currentCount.toString(), { fontSize: '20px Arial', fontStyle: "bold", color: 'black' })
        this.add.text(230, 440, "Try agian, Select 'Start' to continue.", { fontSize: '15px Arial', color: 'black' })

        let buttonStart = this.add.image(350, 530, 'button')
        .setDisplaySize(120, 120)
        .setOrigin(0.5, 0.5)
        .setInteractive();
        let startText = this.add.text(0, 0, 'Start', { fontSize: '25px Arial', fontStyle: 'bold', color: 'black' });
        startText.setOrigin(0.5, 0.5);
        startText.setPosition(buttonStart.x, buttonStart.y);

        buttonStart.on('pointerdown', () => {
            console.log("Quay lại màn chơi")
            if (this.buttonSound) {
                this.buttonSound.play();
            }
            const currentLevelFruits = this.fruitsCaught.get(this.levelId);
            if (currentLevelFruits) {
                currentLevelFruits.length = 0; 
            }
            console.log('Fruits caught for the current level cleared:', this.fruitsCaught);
            this.validFruitsCount = 0;
            console.log("Level trước đó", this.levelId);
            this.scene.start('LevelScene', {
                levelId: this.levelId,
                fruitsCaught: Array.from(this.fruitsCaught.get(this.levelId) || []), 
            });
            // this.scene.start("PlayGameScene")


        });

    }

    checkAnswer(currentCount: number, optionDTO: OptionDTO) {
        console.log(optionDTO.value)
        if (currentCount === optionDTO.value) {
            console.log("Đúng");
            this.levelId += 1;
            console.log("Transitioning to LevelScene with levelId:", this.levelId);
            this.scene.start('LevelScene', { levelId: this.levelId });
        } else {
            console.log("Sai");
            this.WrongChoice(currentCount);
        }
        
    }
    

    update() {}
}
